#include "LinkedListAPI.h"

List initializeList(char *(*printFunction)(void *toBePrinted), void (*deleteFunction)(void *toBeDeleted), int (*compareFunction)(const void *first, const void *second)) {
  List list;

  list.head = NULL;
  list.tail = NULL;
  list.deleteData = deleteFunction;
  list.compare = compareFunction;
  list.printData = printFunction;

  return list;
}

Node *initializeNode(void *data) {
  Node *node;
  node = (Node*)malloc(sizeof(Node));

  node->data = data;
  node->previous = NULL;
  node->next = NULL;

  return node;
}

void insertFront(List *list, void *toBeAdded) {
  Node *node = initializeNode(toBeAdded);
  node->previous = NULL;

  if(list->head) {
    node->next = list->head;
    list->head->previous = node;
    list->head = node;
  } else {
    list->head = node;
    list->tail = node;
  }
}

void insertBack(List *list, void *toBeAdded) {
  Node *node = initializeNode(toBeAdded);
  node->next = NULL;

  if(list->tail) {
    node->previous = list->tail;
    list->tail->next = node;
    list->tail = node;
  } else {
    list->head = node;
    list->tail = node;
  }
}

void clearList(List *list) {
  Node *toDelete;

  if(list) {
    while(list->head) {
      free(list->head->data);
      toDelete = list->head;
      list->head = list->head->next;
      free(toDelete);
    }

    printf("List destroyed.");
  } else {
    printf("List hasn't been initialized.");
  }
}

void insertSorted(List *list, void *toBeAdded) {
  Node *node = initializeNode(toBeAdded);
  Node *compareNode = list->head;
  int found = 0;

  if(list->head) {
    if(list->compare(list->head, toBeAdded) < 0) {
      node->previous = NULL;
      node->next = list->head;
      list->head = node;
    } else {
      while(compareNode) {
        if(list->compare(compareNode, toBeAdded) >= 0) {
          node->previous = compareNode;
          node->next = compareNode->next;
          compareNode->next->previous = node;
          compareNode->next = node;

          break;
        } else {
          compareNode = compareNode->next;
        }
      }
    }

    if(!compareNode) {
      list->tail->next = node;
      node->previous = list->tail;
      list->tail = node;
    }
  } else {
    list->head = node;
    list->tail = node;
  }
}

void *deleteDataFromList(List *list, void *toBeDeleted) {
  Node *nodeCheck;

  if(

  if(!nodeCheck) {
    printf("No nodes to be deleted.");
    return NULL;
  }

  while(nodeCheck) {
    if(list->compare(nodeCheck->data, toBeDeleted == 0) {
      nodeCheck->previous->next = nodeCheck->next;
      nodeCheck->next->previous = nodeCheck->previous;

      free(nodeCheck->data);
      free(nodeCheck);
      break;
    }
  }

  return toBeDeleted;
}

void *getFromFront(List *list) {
  if(!list) {
    printf("List does not exist.");
    return NULL;
  }

  if(!list->head) {
    printf("List has no nodes.");
    return NULL;
  }

  if(!list->head->data) {
    printf("Head has no data.");
    return NULL;
  }

  return list->head->data;
}

void *getFromBack(List *list) {
  if(!list) {   
    printf("List does not exist.");
    return NULL;
  }

  if(!list->tail) { 
    printf("List has no nodes.");
    return NULL;
  }

  if(!list->tail->data) { 
    printf("Tail has no data.");
    return NULL;
  }

  return list->tail->data;
}

char *toString(List list) {
  Node *curr;
  char *str = NULL;

  if(!list->head) {
    printf("No nodes in the list.");
    return NULL;
  }
  curr = list->head;

  while(list->head) {
    if(list->head->data) {
      if(str) {
        
      } else {
        str = (char*)malloc(sizeof((char) * strlen(list->printData(list->head-))));
      }
    }
  } else {
    
  }
}

ListIterator createIterator(List list) {
  
}

void *nextElement(ListIterator (iter) {
  
}
